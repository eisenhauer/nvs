/*
 *  (c) Copyright 2016-2017 Hewlett Packard Enterprise Development Company LP.
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  As an exception, the copyright holders of this Library grant you permission
 *  to (i) compile an Application with the Library, and (ii) distribute the
 *  Application containing code generated by the Library and added to the
 *  Application during this compilation process under terms of your choice,
 *  provided you also meet the terms and conditions of the Application license.
 *
 */

#ifndef _NVS_MEMORY_MANAGER_H_
#define _NVS_MEMORY_MANAGER_H_

#include <memory>
#include <atomic>
#include <mutex>


namespace nvs{

    class MemoryManager
    {
    public:
        // there is only one instance of mm in a process
        // return the instance
        static MemoryManager *GetInstance();

        /*
           methods to access a global pointer, without knowning its size
           internally
        */
        void *GlobalToLocal(GlobalPtr ptr);
        GlobalPtr LocalToGlobal(void *addr);

        /*
           a heap provides Alloc/Free APIs
        */
        // Create a heap with the given id
        // NOTE: size is the default shelf size; not the total size of the heap
        // Return
        // - NO_ERROR: heap was created
        // - ID_FOUND: the given id is in use
        ErrorCode CreateLog(PoolId id, size_t shelf_size);

        // Destroy the heap with the given id
        // Return
        // - NO_ERROR: heap was destroyed
        // - ID_NOT_FOUND: heap of the given id is not found
        // NOTE
        // - caller must make sure no other processes are still accessing this heap
        ErrorCode DestroyLog(PoolId id);

        // Find the heap by id and return a pointer to the heap object if it exists
        // Caller is responsible for freeing the poitner
        // Return
        // - NO_ERROR: heap is found and returned
        // - ID_NOT_FOUND: heap of the given id is not found
        // NOTE
        // - It will always return a new heap object even if the heap was already created/opened in the
        // same process
        // - The best use pattern is to find and open a heap once in a process
        ErrorCode FindLog(PoolId id, Heap **heap);

        // Find the heap by id and return a pointer to the heap object if it exists
        // Caller is responsible for freeing the poitner
        // Return NULL if heap of the given id is not found
        Heap *FindLog(PoolId id);

    private:
        static std::atomic<MemoryManager*> instance_;
        static std::mutex mutex_;

        MemoryManager();
        ~MemoryManager();

        class Impl_;
        std::unique_ptr<Impl_> pimpl_;

    };
} // namespace nvs
#endif
