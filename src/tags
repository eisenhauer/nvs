!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BUDDY_OFFSET	./px_constants.h	28;"	d
CHUNK_SIZE	./px_constants.h	19;"	d
CONFIG_FILE_NAME	./px_constants.h	7;"	d
COPY_STRATEGY	./px_constants.h	20;"	d
CR_TYPE	./px_constants.h	30;"	d
DEBUG_ENABLE	./px_constants.h	11;"	d
DEBUG_ENABLE	./px_constants.h	21;"	d
DECLTYPE	./uthash.h	37;"	d
DECLTYPE	./uthash.h	40;"	d
DECLTYPE	./uthash.h	44;"	d
DECLTYPE	./uthash.h	46;"	d
DECLTYPE_ASSIGN	./uthash.h	50;"	d
DECLTYPE_ASSIGN	./uthash.h	56;"	d
DOUBLE_IN_MEMORY_LOCAL	./px_dlog.h	/^    DOUBLE_IN_MEMORY_LOCAL,$/;"	e	enum:__anon1
DOUBLE_IN_MEMORY_REMOTE	./px_dlog.h	/^    DOUBLE_IN_MEMORY_REMOTE$/;"	e	enum:__anon1
DRAM_CHECKPOINT	./px_types.h	/^    DRAM_CHECKPOINT,$/;"	e	enum:__anon2
EARLY_COPY_ENABLED	./px_constants.h	34;"	d
EARLY_COPY_OFFSET	./px_constants.h	35;"	d
ELMT_FROM_HH	./uthash.h	101;"	d
FILE_PATH_ONE	./px_log.c	15;"	d	file:
FILE_PATH_TWO	./px_log.c	16;"	d	file:
FREE_MEMORY	./px_constants.h	31;"	d
HASH_ADD	./uthash.h	169;"	d
HASH_ADD_INT	./uthash.h	269;"	d
HASH_ADD_KEYPTR	./uthash.h	182;"	d
HASH_ADD_PTR	./uthash.h	275;"	d
HASH_ADD_STR	./uthash.h	263;"	d
HASH_ADD_TO_BKT	./uthash.h	622;"	d
HASH_BER	./uthash.h	364;"	d
HASH_BKT_CAPACITY_THRESH	./uthash.h	98;"	d
HASH_BLOOM_ADD	./uthash.h	136;"	d
HASH_BLOOM_ADD	./uthash.h	145;"	d
HASH_BLOOM_BITLEN	./uthash.h	117;"	d
HASH_BLOOM_BITSET	./uthash.h	133;"	d
HASH_BLOOM_BITTEST	./uthash.h	134;"	d
HASH_BLOOM_BYTELEN	./uthash.h	118;"	d
HASH_BLOOM_BYTELEN	./uthash.h	147;"	d
HASH_BLOOM_FREE	./uthash.h	128;"	d
HASH_BLOOM_FREE	./uthash.h	144;"	d
HASH_BLOOM_MAKE	./uthash.h	119;"	d
HASH_BLOOM_MAKE	./uthash.h	143;"	d
HASH_BLOOM_SIGNATURE	./uthash.h	913;"	d
HASH_BLOOM_TEST	./uthash.h	139;"	d
HASH_BLOOM_TEST	./uthash.h	146;"	d
HASH_CLEAR	./uthash.h	860;"	d
HASH_CNT	./uthash.h	889;"	d
HASH_COUNT	./uthash.h	888;"	d
HASH_DEL	./uthash.h	279;"	d
HASH_DELETE	./uthash.h	224;"	d
HASH_DEL_IN_BKT	./uthash.h	636;"	d
HASH_EMIT_KEY	./uthash.h	346;"	d
HASH_EMIT_KEY	./uthash.h	353;"	d
HASH_EXPAND_BUCKETS	./uthash.h	677;"	d
HASH_FCN	./uthash.h	358;"	d
HASH_FCN	./uthash.h	360;"	d
HASH_FIND	./uthash.h	103;"	d
HASH_FIND_INT	./uthash.h	267;"	d
HASH_FIND_IN_BKT	./uthash.h	608;"	d
HASH_FIND_PTR	./uthash.h	273;"	d
HASH_FIND_STR	./uthash.h	261;"	d
HASH_FNV	./uthash.h	386;"	d
HASH_FSCK	./uthash.h	287;"	d
HASH_FSCK	./uthash.h	339;"	d
HASH_INITIAL_NUM_BUCKETS	./uthash.h	96;"	d
HASH_INITIAL_NUM_BUCKETS_LOG2	./uthash.h	97;"	d
HASH_ITER	./uthash.h	878;"	d
HASH_ITER	./uthash.h	882;"	d
HASH_JEN	./uthash.h	427;"	d
HASH_JEN_MIX	./uthash.h	414;"	d
HASH_KEYCMP	./uthash.h	605;"	d
HASH_MAKE_TABLE	./uthash.h	150;"	d
HASH_MUR	./uthash.h	565;"	d
HASH_OAT	./uthash.h	398;"	d
HASH_OOPS	./uthash.h	286;"	d
HASH_OVERHEAD	./uthash.h	871;"	d
HASH_REPLACE	./uthash.h	172;"	d
HASH_REPLACE_INT	./uthash.h	271;"	d
HASH_REPLACE_PTR	./uthash.h	277;"	d
HASH_REPLACE_STR	./uthash.h	265;"	d
HASH_SAX	./uthash.h	376;"	d
HASH_SELECT	./uthash.h	822;"	d
HASH_SFH	./uthash.h	479;"	d
HASH_SIGNATURE	./uthash.h	912;"	d
HASH_SORT	./uthash.h	729;"	d
HASH_SRT	./uthash.h	730;"	d
HASH_TO_BKT	./uthash.h	207;"	d
HELPER_CORES	./px_constants.h	36;"	d
KEY_LENGTH	./px_constants.h	5;"	d
MAX_CHECKPOINTS	./px_constants.h	14;"	d
MAX_CHECKPOINTS	./px_constants.h	33;"	d
MD5_LENGTH	./px_constants.h	15;"	d
MICROSEC	./px_util.h	11;"	d
MUR_FMIX	./uthash.h	556;"	d
MUR_GETBLOCK	./uthash.h	534;"	d
MUR_GETBLOCK	./uthash.h	550;"	d
MUR_ONE_THREE	./uthash.h	544;"	d
MUR_ONE_THREE	./uthash.h	548;"	d
MUR_PLUS0_ALIGNED	./uthash.h	536;"	d
MUR_PLUS1_ALIGNED	./uthash.h	537;"	d
MUR_PLUS2_ALIGNED	./uthash.h	538;"	d
MUR_PLUS3_ALIGNED	./uthash.h	539;"	d
MUR_ROTL32	./uthash.h	555;"	d
MUR_THREE_ONE	./uthash.h	542;"	d
MUR_THREE_ONE	./uthash.h	546;"	d
MUR_TWO_TWO	./uthash.h	543;"	d
MUR_TWO_TWO	./uthash.h	547;"	d
NAIVE_COPY	./px_constants.h	37;"	d
NO_DECLTYPE	./uthash.h	39;"	d
NO_DECLTYPE	./uthash.h	43;"	d
NVM_SIZE	./px_constants.h	10;"	d
NVM_SIZE	./px_constants.h	18;"	d
NVRAM_CHECKPOINT	./px_types.h	/^    NVRAM_CHECKPOINT$/;"	e	enum:__anon2
NVRAM_EARLY_COPY_WBW	./px_constants.h	24;"	d
NVRAM_WBW	./px_constants.h	13;"	d
NVRAM_WBW	./px_constants.h	23;"	d
PFILE_LOCATION	./px_constants.h	12;"	d
PFILE_LOCATION	./px_constants.h	22;"	d
PHOENIX_PX_DLOG_H	./px_dlog.h	2;"	d
PHOENIX_PX_TYPES_H	./px_types.h	3;"	d
REMOTE_CHECKPOINT_ENABLE	./px_constants.h	26;"	d
REMOTE_RESTART_ENABLE	./px_constants.h	27;"	d
RING_BUFFER_SLOTS	./px_constants.h	4;"	d
RSTART	./px_constants.h	25;"	d
SPLIT_RATIO	./px_constants.h	29;"	d
THRESHOLD_SIZE	./px_constants.h	32;"	d
UTHASH_H	./uthash.h	25;"	d
UTHASH_VERSION	./uthash.h	76;"	d
UT_hash_bucket	./uthash.h	/^typedef struct UT_hash_bucket {$/;"	s
UT_hash_bucket	./uthash.h	/^} UT_hash_bucket;$/;"	t	typeref:struct:UT_hash_bucket
UT_hash_handle	./uthash.h	/^typedef struct UT_hash_handle {$/;"	s
UT_hash_handle	./uthash.h	/^} UT_hash_handle;$/;"	t	typeref:struct:UT_hash_handle
UT_hash_table	./uthash.h	/^typedef struct UT_hash_table {$/;"	s
UT_hash_table	./uthash.h	/^} UT_hash_table;$/;"	t	typeref:struct:UT_hash_table
WP	./uthash.h	540;"	d
__CONSTANTS_H	./px_constants.h	2;"	d
__PX_DEBUG_H	./px_debug.h	2;"	d
__PX_LOG_H	./px_log.h	2;"	d
__PX_UITL_H	./px_util.h	2;"	d
__nsleep	./px_util.c	/^int __nsleep(const struct timespec *req, struct timespec *rem)$/;"	f
bloom_bv	./uthash.h	/^   uint8_t *bloom_bv;$/;"	m	struct:UT_hash_table
bloom_nbits	./uthash.h	/^   char bloom_nbits;$/;"	m	struct:UT_hash_table
bloom_sig	./uthash.h	/^   uint32_t bloom_sig; \/* used only to test bloom exists in external analysis *\/$/;"	m	struct:UT_hash_table
buckets	./uthash.h	/^   UT_hash_bucket *buckets;$/;"	m	struct:UT_hash_table
buddy_offset	./px_types.h	/^    int buddy_offset;$/;"	m	struct:ccontext_t_
calc_delay_ns	./px_util.c	/^unsigned long calc_delay_ns(size_t datasize,int bandwidth){$/;"	f
ccontext_t	./px_types.h	/^} ccontext_t;$/;"	t	typeref:struct:ccontext_t_
ccontext_t_	./px_types.h	/^typedef struct ccontext_t_{$/;"	s
check	./px_debug.h	24;"	d
check_debug	./px_debug.h	30;"	d
check_mem	./px_debug.h	28;"	d
checkpoint_iteration	./px_types.h	/^    ulong checkpoint_iteration;$/;"	m	struct:rcontext_t_
checkpoint_t	./px_log.h	/^}checkpoint_t;$/;"	t	typeref:struct:checkpoint_t_
checkpoint_t_	./px_log.h	/^typedef struct checkpoint_t_{$/;"	s
checkpoint_type	./px_types.h	/^}checkpoint_type;$/;"	t	typeref:enum:__anon2
checkpoint_version	./px_types.h	/^    long checkpoint_version;$/;"	m	struct:destage_t_
checkpoint_version	./px_types.h	/^    ulong checkpoint_version;$/;"	m	struct:rcontext_t_
chunk_size	./px_types.h	/^    int chunk_size;$/;"	m	struct:ccontext_t_
clean_errno	./px_debug.h	16;"	d
cond	./px_types.h	/^    pthread_cond_t cond; \/* use to singaling between ec and main threads *\/$/;"	m	struct:rcontext_t_
cond_ec_start	./px_types.h	/^    pthread_cond_t cond_ec_start; \/* signal between destage and ec threads *\/$/;"	m	struct:rcontext_t_
config_context	./phoenix.c	/^ccontext_t config_context;$/;"	v
config_context	./px_types.h	/^    ccontext_t *config_context;$/;"	m	struct:rcontext_t_
copy_strategy	./px_types.h	/^    int copy_strategy;$/;"	m	struct:ccontext_t_
count	./uthash.h	/^   unsigned count;$/;"	m	struct:UT_hash_bucket
cr_type	./px_types.h	/^    int cr_type;$/;"	m	struct:ccontext_t_
create_shm	./px_log.c	/^int create_shm(char *ishm_name, char *dshm_name,ulong log_size){$/;"	f
current_version	./px_log.h	/^    ulong current_version; \/\/ new atomic flag that uses checkpoint version$/;"	m	struct:headmeta_t_
data_log	./px_log.h	/^    logdata_t data_log;$/;"	m	struct:log_t_
debug	./px_debug.h	11;"	d
debug	./px_debug.h	13;"	d
debug_enabled	./px_debug.c	/^int debug_enabled = 0;$/;"	v
destage_t	./px_types.h	/^}destage_t;$/;"	t	typeref:struct:destage_t_
destage_t_	./px_types.h	/^typedef struct destage_t_{$/;"	s
dim_type	./px_dlog.h	/^} dim_type;$/;"	t	typeref:enum:__anon1
disable_debug	./px_debug.c	/^void disable_debug(){$/;"	f
dlog	./px_types.h	/^    struct dlog_t_ *dlog;$/;"	m	struct:destage_t_	typeref:struct:destage_t_::dlog_t_
dlog	./px_types.h	/^    struct dlog_t_ *dlog;$/;"	m	struct:rcontext_t_	typeref:struct:rcontext_t_::dlog_t_
dlog_checkpoint_version	./px_dlog.h	/^    long dlog_checkpoint_version; \/\/current version no of the checkpoint$/;"	m	struct:dlog_t_
dlog_init	./px_dlog.c	/^void dlog_init(dlog_t *dlog){$/;"	f
dlog_local_write	./px_dlog.c	/^int dlog_local_write(dlog_t *dlog, var_t *list,int process_id,long version){$/;"	f
dlog_read	./px_dlog.c	/^var_t *dlog_read(dlog_t *dlog, char *var_name, int process_id, long version, checkpoint_type type) {$/;"	f
dlog_remote_checkpoint_version	./px_dlog.h	/^    long dlog_remote_checkpoint_version; \/\/ track version and validity of remote checkpoint$/;"	m	struct:dlog_t_
dlog_remote_write	./px_dlog.c	/^int dlog_remote_write(dlog_t *dlog, var_t *list,int process_id,long version) {$/;"	f
dlog_t	./px_dlog.h	/^}dlog_t;$/;"	t	typeref:struct:dlog_t_
dlog_t_	./px_dlog.h	/^typedef struct dlog_t_{$/;"	s
dlog_write	./px_dlog.c	/^int dlog_write(dlog_t *dlog, var_t *list,int process_id,long version, dim_type type) {$/;"	f
early_copied	./px_types.h	/^    volatile int early_copied; \/\/ get accesed by signal handler$/;"	m	struct:var_t_
early_copy_enabled	./px_types.h	/^    int early_copy_enabled;$/;"	m	struct:ccontext_t_
earlycopy_time_offset	./px_types.h	/^    struct timeval earlycopy_time_offset; \/* time offset since checkpoint, before starting early copy *\/$/;"	m	struct:var_t_	typeref:struct:var_t_::timeval
ec_abort	./px_types.h	/^    int ec_abort; \/* flag variable to signal ec thread - stop early copy *\/$/;"	m	struct:rcontext_t_
ec_finished	./px_types.h	/^    int ec_finished; \/* flag variable to check if early copy thread finished*\/$/;"	m	struct:rcontext_t_
ec_offset_add	./px_types.h	/^    ulong ec_offset_add;$/;"	m	struct:ccontext_t_
ec_start	./px_types.h	/^    int ec_start; \/* notify to start early copy. set by destage or main thread *\/$/;"	m	struct:rcontext_t_
elem_start_ptr	./px_log.h	/^    checkpoint_t *elem_start_ptr;$/;"	m	struct:ringbuffer_t_
enable_debug	./px_debug.c	/^void enable_debug(){$/;"	f
end_offset	./px_log.h	/^    long end_offset;   \/\/ end offset in linear log$/;"	m	struct:checkpoint_t_
end_timestamp	./px_types.h	/^    struct timeval end_timestamp; \/*last access time of the variable*\/$/;"	m	struct:var_t_	typeref:struct:var_t_::timeval
expand_mult	./uthash.h	/^   unsigned expand_mult;$/;"	m	struct:UT_hash_bucket
file_name	./px_log.h	/^	char file_name[256];$/;"	m	struct:ringbuffer_t_
file_name	./px_log.h	/^    char file_name[256];$/;"	m	struct:logdata_t_
free_memory	./px_types.h	/^    long free_memory;$/;"	m	struct:rcontext_t_
free_memory	./px_types.h	/^    ulong free_memory;$/;"	m	struct:ccontext_t_
get16bits	./uthash.h	469;"	d
get16bits	./uthash.h	472;"	d
get16bits	./uthash.h	476;"	d
handle_error	./px_util.c	24;"	d	file:
hash	./px_log.h	/^    unsigned char hash[MD5_LENGTH]; \/\/ 64 bit hash value$/;"	m	struct:checkpoint_t_
hash	./px_types.h	/^    unsigned char hash[MD5_LENGTH]; \/\/ used for md5 digest store$/;"	m	struct:var_t_
hashv	./uthash.h	/^   unsigned hashv;                   \/* result of hash-fcn(key)        *\/$/;"	m	struct:UT_hash_handle
head	./px_log.h	/^    headmeta_t *head;$/;"	m	struct:ringbuffer_t_
head	./px_log.h	/^    ulong head; \/\/ head index of the ringbuffer$/;"	m	struct:headmeta_t_
headmeta_t	./px_log.h	/^}headmeta_t;$/;"	t	typeref:struct:headmeta_t_
headmeta_t_	./px_log.h	/^typedef struct headmeta_t_{$/;"	s
helper_core_size	./px_types.h	/^    int helper_core_size;$/;"	m	struct:ccontext_t_
helper_cores	./px_types.h	/^    int helper_cores[5];$/;"	m	struct:ccontext_t_
hh	./px_types.h	/^    UT_hash_handle hh;         \/* makes this structure hashable *\/$/;"	m	struct:var_t_
hh_head	./uthash.h	/^   struct UT_hash_handle *hh_head;$/;"	m	struct:UT_hash_bucket	typeref:struct:UT_hash_bucket::UT_hash_handle
hh_next	./uthash.h	/^   struct UT_hash_handle *hh_next;   \/* next hh in bucket order        *\/$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_handle
hh_prev	./uthash.h	/^   struct UT_hash_handle *hh_prev;   \/* previous hh in bucket order    *\/$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_handle
hho	./uthash.h	/^   ptrdiff_t hho; \/* hash handle offset (byte pos of hash handle in element *\/$/;"	m	struct:UT_hash_table
ideal_chain_maxlen	./uthash.h	/^   unsigned ideal_chain_maxlen;$/;"	m	struct:UT_hash_table
ineff_expands	./uthash.h	/^   unsigned ineff_expands, noexpand;$/;"	m	struct:UT_hash_table
init_mmap_files	./px_log.c	/^static void init_mmap_files(log_t *log){$/;"	f	file:
initshmlock	./px_log.c	/^int initshmlock(log_t *log, ccontext_t *configctxt){$/;"	f
isDebugEnabled	./px_debug.c	/^int isDebugEnabled(){$/;"	f
is_chkpoint_present	./px_log.c	/^int is_chkpoint_present(log_t *log){$/;"	f
is_dlog_remote_valid	./px_dlog.h	/^    int is_dlog_remote_valid;$/;"	m	struct:dlog_t_
is_dlog_valid	./px_dlog.h	/^    int is_dlog_valid; \/\/ used for atomic udate the buffer$/;"	m	struct:dlog_t_
key	./uthash.h	/^   void *key;                        \/* ptr to enclosing struct's key  *\/$/;"	m	struct:UT_hash_handle
key1	./px_types.h	/^    char key1[20];  \/* key *\/$/;"	m	struct:var_t_
keylen	./uthash.h	/^   unsigned keylen;                  \/* enclosing struct's key len     *\/$/;"	m	struct:UT_hash_handle
lchk_end_time	./px_types.h	/^    struct timeval lchk_end_time; \/\/ end time of las checkpoint$/;"	m	struct:rcontext_t_	typeref:struct:rcontext_t_::timeval
lchk_iteration_time	./px_types.h	/^    struct timeval lchk_iteration_time; \/\/ last iteration time$/;"	m	struct:rcontext_t_	typeref:struct:rcontext_t_::timeval
lchk_start_time	./px_types.h	/^    struct timeval lchk_start_time; \/\/ last checkpoint time$/;"	m	struct:rcontext_t_	typeref:struct:rcontext_t_::timeval
lckfile	./px_types.h	/^	char lckfile[50];$/;"	m	struct:ccontext_t_
lib_initialized	./phoenix.c	/^int lib_initialized = 0;$/;"	v
local_dram_checkpoint_size	./px_types.h	/^    ulong local_dram_checkpoint_size;$/;"	m	struct:rcontext_t_
local_remote_ptr	./px_types.h	/^    void *local_remote_ptr;  \/* local pointer out of memory grid *\/$/;"	m	struct:var_t_
log2_num_buckets	./uthash.h	/^   unsigned num_buckets, log2_num_buckets;$/;"	m	struct:UT_hash_table
log_commitv	./px_log.c	/^int log_commitv(log_t *log,ulong version){$/;"	f
log_err	./px_debug.h	18;"	d
log_info	./px_debug.h	22;"	d
log_init	./px_log.c	/^int log_init(log_t *log , int proc_id){$/;"	f
log_initialized	./px_log.h	/^	ushort log_initialized; \/\/ check flag before plock init. $/;"	m	struct:headmeta_t_
log_isempty	./px_log.c	/^int log_isempty(log_t *log){$/;"	f
log_isfull	./px_log.c	/^int log_isfull(log_t *log){$/;"	f
log_ptr	./px_log.c	/^void* log_ptr(log_t *log,ulong offset){$/;"	f
log_read	./px_log.c	/^checkpoint_t *log_read(log_t *log, char *var_name, int process_id,long version){$/;"	f
log_size	./px_log.h	/^    ulong log_size; \/\/ size of the linear log$/;"	m	struct:headmeta_t_
log_size	./px_log.h	/^    ulong log_size;$/;"	m	struct:logdata_t_
log_size	./px_types.h	/^    long log_size;$/;"	m	struct:ccontext_t_
log_t	./px_log.h	/^}log_t;$/;"	t	typeref:struct:log_t_
log_t_	./px_log.h	/^typedef struct log_t_{$/;"	s
log_warn	./px_debug.h	20;"	d
log_write	./px_log.c	/^int log_write(log_t *log, var_t *variable, long version){$/;"	f
logdata_t	./px_log.h	/^}logdata_t;$/;"	t	typeref:struct:logdata_t_
logdata_t_	./px_log.h	/^typedef struct logdata_t_{$/;"	s
main	./format.c	/^int main(int argc, char **argv){$/;"	f
map	./px_dlog.h	/^    var_t *map[2];$/;"	m	struct:dlog_t_
max_checkpoints	./px_types.h	/^    long max_checkpoints;$/;"	m	struct:ccontext_t_
mb	./px_constants.h	41;"	d
md5_digest	./px_util.c	/^void md5_digest(unsigned char *digest,void *data, ulong length){$/;"	f
micro	./px_types.h	/^    ulong micro;$/;"	m	struct:timeoffset_t_
msleep	./px_util.c	/^int msleep(unsigned long nanosec)$/;"	f
mtx	./px_types.h	/^    pthread_mutex_t mtx; \/* mutex to protect shared variables between, main thread, destage thread and ec thread *\/$/;"	m	struct:rcontext_t_
nelements	./px_log.h	/^    uint nelements; \/\/ number of buffer slots in ring buffer$/;"	m	struct:headmeta_t_
next	./uthash.h	/^   void *next;                       \/* next element in app order      *\/$/;"	m	struct:UT_hash_handle
noexpand	./uthash.h	/^   unsigned ineff_expands, noexpand;$/;"	m	struct:UT_hash_table
nonideal_items	./uthash.h	/^   unsigned nonideal_items;$/;"	m	struct:UT_hash_table
nproc	./px_types.h	/^    int nproc;$/;"	m	struct:rcontext_t_
num_buckets	./uthash.h	/^   unsigned num_buckets, log2_num_buckets;$/;"	m	struct:UT_hash_table
num_items	./uthash.h	/^   unsigned num_items;$/;"	m	struct:UT_hash_table
nvlog	./phoenix.c	/^log_t nvlog;$/;"	v
nvlog	./px_types.h	/^    struct log_t_ *nvlog;$/;"	m	struct:destage_t_	typeref:struct:destage_t_::log_t_
nvlog	./px_types.h	/^    struct log_t_ *nvlog;$/;"	m	struct:rcontext_t_	typeref:struct:rcontext_t_::log_t_
nvmmemcpy_read	./px_util.c	/^int nvmmemcpy_read(void *dest, void *src, size_t len, int rbw) {$/;"	f
nvmmemcpy_write	./px_util.c	/^int nvmmemcpy_write(void *dest, void *src, size_t len, int wbw) {$/;"	f
nvptr	./px_types.h	/^    void *nvptr;   \/*this get used in the pre-copy in the restart execution*\/$/;"	m	struct:var_t_
nvram_checkpoint_size	./px_types.h	/^    ulong nvram_checkpoint_size;$/;"	m	struct:rcontext_t_
nvram_wbw	./px_types.h	/^    int nvram_wbw;$/;"	m	struct:ccontext_t_
offset_t	./px_types.h	/^typedef ulong offset_t;$/;"	t
paligned_size	./px_types.h	/^    offset_t paligned_size;$/;"	m	struct:var_t_
pfile_location	./px_types.h	/^    char pfile_location[32];$/;"	m	struct:ccontext_t_
plock	./px_log.h	/^    pthread_mutex_t *plock; \/\/ pointer to actual shared memory lock. TODO$/;"	m	struct:log_t_
plock	./px_log.h	/^    pthread_mutex_t plock;$/;"	m	struct:headmeta_t_
preamble_t	./px_log.h	/^}preamble_t;$/;"	t	typeref:struct:preamble_t_
preamble_t_	./px_log.h	/^typedef struct preamble_t_{$/;"	s
prev	./uthash.h	/^   void *prev;                       \/* prev element in app order      *\/$/;"	m	struct:UT_hash_handle
process_id	./px_log.h	/^    int process_id;$/;"	m	struct:checkpoint_t_
process_id	./px_types.h	/^    int process_id;$/;"	m	struct:destage_t_
process_id	./px_types.h	/^    int process_id;$/;"	m	struct:rcontext_t_
process_id	./px_types.h	/^    int process_id;$/;"	m	struct:var_t_
ptr	./px_types.h	/^    void *ptr;       \/* memory address of the variable*\/$/;"	m	struct:var_t_
px_alighned_allocate	./px_util.c	/^var_t *px_alighned_allocate(size_t size, char *key) {$/;"	f
px_commit	./phoenix.c	/^int px_commit(char *key1, char *key2,px_obj *retobj) {$/;"	f
px_create	./phoenix.c	/^int px_create(char *key1, char *key2, unsigned long size,px_obj *retobj){$/;"	f
px_delete	./phoenix.c	/^int px_delete(char *key1, char *key2){$/;"	f
px_finalize	./phoenix.c	/^int px_finalize(){$/;"	f
px_get	./phoenix.c	/^int px_get(char *key1, char *key2, uint64_t version, px_obj *retobj){$/;"	f
px_init	./phoenix.c	/^int px_init(int proc_id){$/;"	f
px_start_time	./px_types.h	/^    struct timeval px_start_time;$/;"	m	struct:rcontext_t_	typeref:struct:rcontext_t_::timeval
rcontext_t	./px_types.h	/^}rcontext_t;$/;"	t	typeref:struct:rcontext_t_
rcontext_t_	./px_types.h	/^typedef struct rcontext_t_{$/;"	s
read_configs	./px_util.c	/^void read_configs(ccontext_t *config_context,char *file_path){$/;"	f
remote_checkpoint	./px_types.h	/^    int remote_checkpoint;$/;"	m	struct:ccontext_t_
remote_dram_checkpoint_size	./px_types.h	/^    ulong remote_dram_checkpoint_size;$/;"	m	struct:rcontext_t_
remote_ptr	./px_types.h	/^    void **remote_ptr; \/*pointer grid of memory group *\/$/;"	m	struct:var_t_
remote_restart	./px_types.h	/^    int remote_restart;$/;"	m	struct:ccontext_t_
restart_run	./px_types.h	/^    int restart_run;$/;"	m	struct:ccontext_t_
ring_buffer	./px_log.h	/^	ringbuffer_t ring_buffer;$/;"	m	struct:log_t_
ringb_element	./px_log.c	/^checkpoint_t* ringb_element(log_t *log, ulong index){$/;"	f
ringbuffer_t	./px_log.h	/^}ringbuffer_t;$/;"	t	typeref:struct:ringbuffer_t_
ringbuffer_t_	./px_log.h	/^typedef struct ringbuffer_t_{$/;"	s
runtime_context	./phoenix.c	/^rcontext_t runtime_context;$/;"	v
runtime_context	./px_dlog.h	/^    rcontext_t *runtime_context;$/;"	m	struct:dlog_t_
runtime_context	./px_log.h	/^    rcontext_t *runtime_context;$/;"	m	struct:log_t_
seconds	./px_types.h	/^    ulong seconds;$/;"	m	struct:timeoffset_t_
sentinel	./px_debug.h	26;"	d
signature	./uthash.h	/^   uint32_t signature; \/* used only to find hash tables in external analysis *\/$/;"	m	struct:UT_hash_table
size	./px_log.h	/^    ulong size;$/;"	m	struct:checkpoint_t_
size	./px_types.h	/^    offset_t size;$/;"	m	struct:var_t_
split_ratio	./px_types.h	/^    int split_ratio;$/;"	m	struct:ccontext_t_
start_offset	./px_log.h	/^    long start_offset;  \/\/ start offset in linear log$/;"	m	struct:checkpoint_t_
start_ptr	./px_log.h	/^    void *start_ptr;$/;"	m	struct:logdata_t_
started_tracking	./px_types.h	/^    int started_tracking;$/;"	m	struct:var_t_
tail	./px_log.h	/^    ulong tail; \/\/ tail index$/;"	m	struct:headmeta_t_
tail	./uthash.h	/^   struct UT_hash_handle *tail; \/* tail hh in app order, for fast append    *\/$/;"	m	struct:UT_hash_table	typeref:struct:UT_hash_table::UT_hash_handle
tbl	./uthash.h	/^   struct UT_hash_table *tbl;$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_table
threshold_size	./px_types.h	/^    int threshold_size;$/;"	m	struct:ccontext_t_
timeoffset_t	./px_types.h	/^} timeoffset_t;$/;"	t	typeref:struct:timeoffset_t_
timeoffset_t_	./px_types.h	/^typedef struct timeoffset_t_{$/;"	s
type	./px_types.h	/^    checkpoint_type type;$/;"	m	struct:var_t_
uint32_t	./uthash.h	/^typedef unsigned int uint32_t;$/;"	t
uint8_t	./uthash.h	/^typedef unsigned char uint8_t;$/;"	t
uthash_expand_fyi	./uthash.h	92;"	d
uthash_fatal	./uthash.h	79;"	d
uthash_free	./uthash.h	85;"	d
uthash_malloc	./uthash.h	82;"	d
uthash_noexpand_fyi	./uthash.h	89;"	d
value	./px_log.h	/^    long value;$/;"	m	struct:preamble_t_
var_name	./px_log.h	/^    char var_name[20];$/;"	m	struct:checkpoint_t_
var_t	./px_types.h	/^} var_t;$/;"	t	typeref:struct:var_t_
var_t_	./px_types.h	/^typedef struct var_t_ {$/;"	s
varmap	./phoenix.c	/^var_t *varmap = NULL;$/;"	v
varmap	./px_types.h	/^    struct var_t_ **varmap; \/* pointer to varmap pointer *\/$/;"	m	struct:rcontext_t_	typeref:struct:rcontext_t_::var_t_
varname	./px_types.h	/^    char varname[20];$/;"	m	struct:timeoffset_t_
version	./px_log.h	/^    ulong version;$/;"	m	struct:checkpoint_t_
version	./px_types.h	/^    ulong version; \/\/ use in dlog hash structure.$/;"	m	struct:var_t_
